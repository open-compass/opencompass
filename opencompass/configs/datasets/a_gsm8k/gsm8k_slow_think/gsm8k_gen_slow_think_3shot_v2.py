from opencompass.openicl.icl_prompt_template import PromptTemplate
from opencompass.openicl.icl_retriever import ZeroRetriever
from opencompass.openicl.icl_inferencer import GenInferencer
from opencompass.datasets import GSM8KDataset, gsm8k_postprocess, gsm8k_dataset_postprocess, Gsm8kEvaluator

gsm8k_reader_cfg = dict(input_columns=['question'], output_column='answer')

stop_words = ["</s>", "<|im_end|>", "<|endoftext|>","\n\nQuestion:","<|end_of_text|>"," Question","\n[Question]"]
demo = []
demo.append("Okay, let's see. Betty wants to buy a wallet that costs $100. Right now, she only has half of the money she needs. Hmm, half of $100 is $50, so she has $50 saved up so far. Her parents are giving her $15 for the wallet. Then her grandparents are giving her twice as much as her parents. Since her parents gave $15, twice that would be $15 times 2, which is $30. So grandparents are giving $30.\n\nNow, let me add up all the money she has and will receive. She has her own $50, plus the $15 from her parents, and $30 from her grandparents. So that's 50 + 15 + 30. Let's do the math step by step. 50 plus 15 is 65, and then 65 plus 30 is 95. So altogether, Betty will have $95.\n\nBut the wallet costs $100. So how much more does she need? Well, subtract the $95 she has from the total cost of $100. That would be 100 minus 95, which equals $5. So Betty still needs $5 more to buy the wallet.\n\nWait, let me double-check that. If half of $100 is $50, that's correct. Parents give $15, grandparents give twice that, so $30. Adding up 50 + 15 is 65, plus 30 is 95. Yes, that's right. So 100 - 95 is indeed $5. Hmm, seems straightforward. Did I miss anything? Maybe check if \"twice as much as her parents\" refers to the total or per person? But the problem says her parents gave $15 collectively, I assume, not per parent. So grandparents gave twice $15, which is $30. Yeah, that seems right. So yeah, $5 more needed.\n\nSo the answer is $\\boxed{5}$")

demo.append("Okay, let's see. Julie has a 120-page book. She read some pages yesterday, more today, and wants to read half of the remaining pages tomorrow. I need to figure out how many pages she needs to read tomorrow.\n\nFirst, let's break down the information step by step. Yesterday, she read 12 pages. Today, she read twice as many pages as yesterday. So, twice of 12 is 24 pages today. Let me check that again. Yes, because \"twice as many as yesterday\" means 12 multiplied by 2, which is 24. So, total pages read so far would be yesterday's plus today's: 12 + 24 = 36 pages.\n\nNow, the book is 120 pages in total. So, the remaining pages after today would be 120 - 36. Let me calculate that: 120 minus 36 is 84. So, she has 84 pages left after today.\n\nBut wait, the question says she wants to read half of the remaining pages tomorrow. So, half of 84 is... let's divide 84 by 2. 84 divided by 2 is 42. Therefore, she needs to read 42 pages tomorrow.\n\nLet me verify once more to make sure I didn't make any mistakes. Starting with 120 pages. Yesterday: 12, today: 24. Total read: 36. Remaining: 120 - 36 = 84. Half of 84 is 42. Yep, that seems right. I don't think I missed anything here. The key steps were calculating today's pages correctly as twice yesterday's, summing the pages read, subtracting from total to get remaining, then taking half of that remaining for tomorrow. All steps check out.\n\nSo the answer is $\\boxed{42}$")

demo.append("Okay, let's see. James writes a 3-page letter to 2 different friends twice a week. I need to figure out how many pages he writes in a year. Hmm, let me break this down step by step.\n\nFirst, let me understand the problem. James is sending letters to two friends, and he does this twice each week. Each letter is 3 pages long. So, per week, how many pages does he write? Let me calculate that.\n\nIf he writes to 2 friends each time, and he does this twice a week, that means he's sending 2 letters twice a week. Wait, no, hold on. Maybe it's 2 different friends each time he writes? The wording says \"to 2 different friends twice a week.\" So, twice a week, he writes to 2 different friends. So each time he writes, he sends a letter to 2 friends. So per week, that would be 2 times 2, which is 4 letters? But each letter is 3 pages. So per week, total pages would be 4 letters times 3 pages. Wait, but hold on, maybe not.\n\nWait, the problem says \"writes a 3-page letter to 2 different friends twice a week.\" Hmm, maybe each time he writes, he sends a 3-page letter to each of the 2 friends. So each writing session, he writes two letters, each 3 pages. And he does this twice a week. So that would be 2 friends per session, 2 sessions per week. So 2 times 2 is 4 letters a week. Each letter is 3 pages, so 4 times 3 is 12 pages per week. Then, multiply that by the number of weeks in a year to get the total pages per year.\n\nWait, but how many weeks are in a year? Typically, we consider 52 weeks in a year. So 12 pages per week times 52 weeks. Let me compute that. 12 times 50 is 600, and 12 times 2 is 24, so total 624 pages per year.\n\nBut let me double-check. Let me parse the original problem again: \"James writes a 3-page letter to 2 different friends twice a week.\" So each instance of writing, he writes two letters (to two friends), each 3 pages. He does this twice a week. So per week, that's 2 times (2 letters) = 4 letters. Each letter is 3 pages, so 4 letters * 3 pages = 12 pages per week. Then, 12 pages/week * 52 weeks/year = 624 pages/year.\n\nAlternatively, maybe the problem is interpreted as: each time he writes, he sends a single 3-page letter to 2 different friends. Wait, that might not make sense. If it's a single letter addressed to two friends, but that's not usual. Normally, you write separate letters to each friend. So each \"writing\" session, he writes two letters. Each letter is 3 pages. He does this twice a week. So per week, 2 times 2 letters = 4 letters. 4 letters * 3 pages = 12 pages. Then 12 * 52 = 624. That seems correct.\n\nBut let me consider another angle. Maybe \"writes a 3-page letter to 2 different friends twice a week\" could mean that each week, he writes twice to each of the two friends. But that would be different. For example, writing to each friend twice a week, so 2 friends * 2 times = 4 letters per week. But the original wording is \"to 2 different friends twice a week.\" So the \"twice a week\" might apply to the frequency of writing, regardless of the friends. So he twice a week sits down and writes to 2 friends each time. So per week, 2 writing sessions, each session involving 2 letters. So again, 4 letters per week. Each letter 3 pages. So 4 * 3 = 12 pages per week. 12 * 52 = 624.\n\nAlternatively, if \"twice a week\" is per friend, meaning he writes to each friend twice a week, then that would be 2 friends * 2 times = 4 letters per week. But that interpretation might not align with the original sentence structure. The original says \"to 2 different friends twice a week.\" The placement of \"twice a week\" at the end suggests that the entire action of writing to 2 friends is done twice each week.\n\nTherefore, the correct calculation is 2 friends per writing instance, done twice a week, leading to 4 letters per week. Each letter is 3 pages, so 4 * 3 = 12 pages per week. Over a year, 52 weeks, so 12 * 52. Let's compute that:\n\n12 * 52:\n\nFirst, 10 * 52 = 520\n\n2 * 52 = 104\n\n520 + 104 = 624\n\nSo, 624 pages per year.\n\nWait, but is there a leap year consideration? Usually, when problems mention a year, they either mean 365 days or 52 weeks. Since the problem mentions \"twice a week,\" it's more likely using weeks rather than days. So 52 weeks is standard. Unless specified otherwise, we can assume 52 weeks per year.\n\nAlternatively, sometimes people approximate a year as 52 weeks and 1 day, or 52.14 weeks, but for simplicity, 52 weeks is commonly used in such problems. Therefore, 52 weeks is the right number here.\n\nTherefore, the total number of pages James writes in a year is 624.\n\nBut let me verify once again. Let's break it down:\n\nNumber of writing sessions per week: 2\n\nNumber of friends per writing session: 2\n\nTotal letters per week: 2 * 2 = 4\n\nPages per letter: 3\n\nTotal pages per week: 4 * 3 = 12\n\nTotal weeks per year: 52\n\nTotal pages per year: 12 * 52 = 624\n\nYes, that seems consistent. So the answer should be 624 pages.\n\nAlternatively, maybe someone might think it's 3 pages per writing session total, but that doesn't align with the wording. If James writes a 3-page letter to each friend, then each friend gets a 3-page letter. So per writing session, two letters, each 3 pages, totaling 6 pages per writing session. Then, twice a week would be 6 * 2 = 12 pages per week. Then, 12 * 52 = 624. That's the same result. So regardless of interpretation, as long as each friend gets a 3-page letter each time, the total is 624.\n\nWait, but another way: If \"a 3-page letter to 2 different friends\" is considered as one letter that's 3 pages sent to both friends, which is not typical. But if that were the case, then it would be 3 pages per writing session, sent to 2 friends. But how? Unless it's a group letter or something. But standard interpretation is separate letters. So each friend gets their own 3-page letter. Therefore, per writing session, 2 letters * 3 pages = 6 pages. Then twice a week, 6 * 2 = 12 pages per week. Then 12 * 52 = 624. So that's another way to get the same number. So either way, the answer is 624.\n\nSo the answer is $\\boxed{624}$")
prompt = (
    f"Consider the following three reasoning process examples:\n" 
    + "Example 1 \n" + demo[0] + '\n'
    + "Example 2 \n" + demo[1] + '\n'
    + "Example 3 \n" + demo[2] + "\n\n"
    "Please refer to the reasoning approaches demonstrated above, solve the following question by yourself:\n"
    "{question}\n\n"
    "Finally, provide your answer in the following format: 'So the answer is $\\boxed{}$'."
)

gsm8k_infer_cfg = dict(
    prompt_template=dict(
        type=PromptTemplate,
        template=dict(
            round=[
                dict(role='HUMAN', prompt=prompt),
            ],
        ),
    ),
    retriever=dict(type=ZeroRetriever),
    inferencer=dict(type=GenInferencer, max_out_len=4096,stopping_criteria=stop_words)
)

gsm8k_eval_cfg = dict(
    evaluator=dict(type=Gsm8kEvaluator),
    pred_postprocessor=dict(type=gsm8k_postprocess),
    dataset_postprocessor=dict(type=gsm8k_dataset_postprocess),
)

gsm8k_datasets = [
    dict(
        abbr='gsm8k_slow_think_3shot_v2',
        type=GSM8KDataset,
        path='opencompass/gsm8k',
        reader_cfg=gsm8k_reader_cfg,
        infer_cfg=gsm8k_infer_cfg,
        eval_cfg=gsm8k_eval_cfg,
    )
]
